---
title: "Take-home EX1"
editor: visual
execute: 
  warning: false
  message: false
format: html
---

# Take-home Exercise 1: Geospatial Analytics for Social Good

## Setting the Scene

Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world's accessible freshwater.

Developing countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.

To address the issue of providing clean and sustainable water supply to the rural community, a global [Water Point Data Exchange (WPdx)](https://www.waterpointdata.org/about/) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on [WPDx Data Standard](https://www.waterpointdata.org/wp-content/uploads/2021/04/WPDx_Data_Standard.pdf).

## Objectives

Geospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate global and local measures of spatial Association techniques to reveals the spatial patterns of Not Functional water points. For the purpose of this study, Nigeria will be used as the study country.

## The Data

### Apstial data

For the purpose of this assignment, data from [WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/) will be used. There are two versions of the data. They are: WPdx-Basic and WPdx+. You are required to use WPdx+ data set.

### Geospatial data

Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used in this take-home exercise. The data can be downloaded either from The [Humanitarian Data Exchange](https://data.humdata.org/) portal or [geoBoundaries](https://www.geoboundaries.org/).

## Getting Started

In the code chunk below, `p_load()` of *pacman* package is used to install and load the following R packages into R environment:

sf: used for importing, managing and processing geospatial data

tidyverse: a set of packages for data science

tmap: used to generate thematic maps

spdep: used to create spatial weights matrix objects

funModeling: used for rapid Exploratory Data Analysis

```{r}
pacman::p_load(sf, tidyverse, tmap, spdep, funModeling)
```

## Importing Geospatial Data

In this in-class data, two geospatial data sets will be used, they are:

-   geo_export

-   nga_admbnda_adm2_osgof_20190417

### Importing water point geospatial data

First, we are going to import the water point geospatial data (i.e. geo_export) by using the code chunk below.

```{r}
#| eval: false
wp <- st_read(dsn="geodata",
              layer="geo_export",
              crs=4326) %>%
  filter(clean_coun == "Nigeria")
```

Next, `write_rds()` of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called *wp_nga.rds* and it is saved in *geodata* sub-folder.

```{r}
#| eval: false
wp_nga <- write_rds(wp,
                    "geodata/wp_nga.rds")
```

### Importing Nigeria LGA boundary data

```{r}
#| eval: false
nga <- st_read(dsn="geodata",layer="nga_admbnda_adm2_osgof_20190417",
               crs=4326)
```

## Data Wrangling

### Recoding NA values into string

`replace_na()` is used to recode all the *NA* values in *status_cle* field into *Unknown*.

```{r}
#| eval: false
wp_nga <- read_rds("geodata/wp_nga.rds") %>%
  mutate(status_cle = replace_na(status_cle, "Unknown"))
```

### EDA

`freq()` of **funModeling** package is used to display the distribution of *status_cle* field in *wp_nga*.

```{r}
#| eval: false
freq (data=wp_nga,
      input = "status_cle")
```

There are 9 different status of data, for the convenience of analysis, we will group them into 3 categories.

Functional: Functional, Functional but needs repair, Functional but not in use.

Non functional: Non-Functional, Non-Functional due to dry season, Non functional due to dry season, Abandoned

Unknown: Unknown

### Extracting funtional water point

```{r}
#| eval: false
wpt_functional <- wp_nga %>%
  filter(status_cle %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
freq(data=wpt_functional, input="status_cle")
```

```{r}
#| eval: false
freq(data=wpt_functional, 
     input = 'status_cle')
```

### Extracting non-funtional water point

```{r}
#| eval: false
wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

```{r}
#| eval: false
freq(data=wpt_nonfunctional, 
     input = 'status_cle')
```

### Extracting water point with Unknown class

```{r}
#| eval: false
wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")
```

## Performing Point-in-Polygon Count

```{r}
#| eval: false
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

## Saving the Analytical Data Table

```{r}
#| eval: false
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%
  select(3:4, 9:10, 18:23)
```

Now, we have the tidy sf data table subsequent analysis. We will save the sf data table into rds format.

```{r}
#| eval: false
write_rds(nga_wp, "geodata/nga_wp.rds")
```

## Visualising the spatial dsitribution of water points

```{r}
nga_wp <- read_rds("geodata/nga_wp.rds")
total <- qtm(nga_wp, "total wpt")
wp_functional <- qtm(nga_wp, "wpt functional")
wp_nonfunctional <- qtm(nga_wp, "wpt non-functional")
unknown <- qtm(nga_wp, "wpt unknown")

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)
```

```{r}
st_crs(nga_wp)
```

## Visualising Regional Development Indicator

```{r}
equal <- tm_shape(nga_wp) +
  tm_fill("wpt non-functional",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(nga_wp) +
  tm_fill("wpt non-functional",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

To ensure the consistency of the analysis scale, the fixed distance method will be used. Determine the centroid for each area

```{r}
coords <- st_centroid(st_geometry(nga_wp))
```

## Determine the cutoff distance for fixed distance weight matrix

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords))
summary(k1dists)
```

The result shows that the maximum distance is 72.027.

```{r}
threshold <- max(unlist(nbdists(k1, coords)))
```

## Computing Fixed distance weight matrix

```{r}
wm_d73 <- dnearneigh(coords, 0, threshold)
wm_d73
```

Each region have average 23 neighbors.

## Visualizing the Distance weight Matrix

```{r}
par(mfrow=c(1,2))
plot(nga_wp$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(nga_wp$geometry, border="lightgrey", main="Distance link")
plot(wm_d73, coords, add=TRUE, pch = 19, cex = 0.6)
```

## Assigning weights to each neighboring polygon

```{r}
wm73_lw <- nb2listw(wm_d73, 
                   style="W", 
                   zero.policy = TRUE)
summary (wm73_lw )
```

## The weight of the first polygon's neighbors

```{r}
wm73_lw$weights[10]
```

## Using Moran's \| for Global Spatial Autocorrelation

```{r}
moran.test(nga_wp$`wpt non-functional`, 
           listw=wm73_lw, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

### 

Computing Monte Carlo Moran's \|

```{r}
set.seed(1234)
MC_NF= moran.mc(nga_wp$`wpt non-functional`, 
                listw=wm73_lw, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
MC_NF
```

```{r}
set.seed(1234)
MC_F= moran.mc(nga_wp$`wpt functional`, 
                listw=wm73_lw, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
MC_F
```

From the result Moran \| value is \> 0,the overall spatial autocorrelation tend to be similarly clustered. The p value is 0.001 which is statically significant. Therefore, null hypothesis should be rejected. There is sign of clustering.

### Visualising Monte Carlo simulation of Moran's \|

```{r}
hist(MC_NF$res, 
     freq=TRUE, 
     breaks=100, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

```{r}
hist(MC_F$res, 
     freq=TRUE, 
     breaks=100, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

## Cluster and Outlier Analysis

```{r}
fips <- order(nga_wp$ADM2_EN)
localMI_dw <- localmoran(nga_wp$`wpt non-functional`, wm73_lw)
localMI_dw_FUN <- localmoran(nga_wp$`wpt functional`, wm73_lw)
```

```{r}
head(localMI_dw_FUN)
```

```{r}
nga_wp.localMI <- cbind(nga_wp,localMI_dw) %>%
  rename(Pr.Ii.nf = Pr.z....E.Ii..)
nga_wp.localMI <- cbind(nga_wp.localMI,localMI_dw_FUN) %>%
  rename(Pr.Ii.f = Pr.z....E.Ii..)
```

### Mapping local Moran's I value

```{r}
Moran_NF <- tm_shape(nga_wp.localMI) + 
  tm_fill("white") +
  tm_borders("grey", lwd = 0.5, alpha = 0.5) +
  tm_shape(nga_wp.localMI[nga_wp.localMI$Pr.Ii.nf <= 0.05,]) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran I value for p < 0.05 (Non Functional)",
            main.title.size = 0.7,
            main.title.fontface = "bold",
            title = "Fixed Distance Weight",
            title.size = 0.6,
            legend.height = 0.25,
            legend.width = 0.35)
  

Moran_F <- tm_shape(nga_wp.localMI) + 
  tm_fill("white") +
  tm_borders("grey", lwd = 0.5, alpha = 0.5) +
  tm_shape(nga_wp.localMI[nga_wp.localMI$Pr.Ii.f <= 0.05,]) +
  tm_fill(col = "Ii.1", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran I value for p < 0.05 (Functional)",
            main.title.size = 0.7,
            main.title.fontface = "bold",
            title = "Fixed Distance Weight",
            title.size = 0.6,
            legend.height = 0.25,
            legend.width = 0.35)

tmap_arrange(Moran_NF, Moran_F, asp = 1, ncol = 2)
```

### Mapping local Moran's I p-values

```{r}
p_value_nf <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii.nf", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues",
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value (Non-Functional)",
            main.title.size = 0.7,
            main.title.fontface = "bold",
            title = "Fixed Distance Weight",
            title.size = 0.6,
            legend.height = 0.25,
            legend.width = 0.35)


p_value_f <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii.f", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Greens",
          title = "local Moran's I p-values" ) +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value (Functional)",
            main.title.size = 0.7,
            main.title.fontface = "bold",
            title = "Fixed Distance Weight",
            title.size = 0.6,
            legend.height = 0.25,
            legend.width = 0.35)

tmap_arrange(p_value_nf, p_value_f, asp=1, ncol=2)
```

### 

```{r}
pacman::p_load(sf,tidyverse,tmap,spdep,funModeling)
```

## Importing Geospatial Data

Importing water point geospatial data

```{r}
#| eval: false
wp <- st_read(dsn="geodata",
              layer="geo_export",
              crs=4326) %>%
  filter(clean_coun == "Nigeria")
```

#### Mapping both local Moran's I values and p-values

```{r}
Moran_NF <- tm_shape(nga_wp.localMI) + 
  tm_fill("white") +
  tm_borders("grey", lwd = 0.5, alpha = 0.5) +
  tm_shape(nga_wp.localMI[nga_wp.localMI$Pr.Ii.nf <= 0.05,]) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran I value for p < 0.05 (Non Functional)",
            main.title.size = 0.7,
            main.title.fontface = "bold",
            title = "Fixed Distance Weight",
            title.size = 0.6,
            legend.height = 0.25,
            legend.width = 0.35)
  

Moran_F <- tm_shape(nga_wp.localMI) + 
  tm_fill("white") +
  tm_borders("grey", lwd = 0.5, alpha = 0.5) +
  tm_shape(nga_wp.localMI[nga_wp.localMI$Pr.Ii.f <= 0.05,]) +
  tm_fill(col = "Ii.1", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran I value for p < 0.05 (Functional)",
            main.title.size = 0.7,
            main.title.fontface = "bold",
            title = "Fixed Distance Weight",
            title.size = 0.6,
            legend.height = 0.25,
            legend.width = 0.35)

p_value_nf <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii.nf", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues",
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value (Non-Functional)",
            main.title.size = 0.7,
            main.title.fontface = "bold",
            title = "Fixed Distance Weight",
            title.size = 0.6,
            legend.height = 0.25,
            legend.width = 0.35)


p_value_f <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii.f", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Greens",
          title = "local Moran's I p-values" ) +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value (Functional)",
            main.title.size = 0.7,
            main.title.fontface = "bold",
            title = "Fixed Distance Weight",
            title.size = 0.6,
            legend.height = 0.25,
            legend.width = 0.35)
tmap_arrange(Moran_NF, Moran_F, p_value_nf, p_value_f, asp=1, ncol=2)
```

## LISA Cluster Map

### Plotting Moran scatterplot

```{r}
nci <- moran.plot(nga_wp$`wpt non-functional`, wm73_lw,
                  labels=as.character(nga_wp$ADM2_EN), 
                  xlab="Non Functional Water Point", 
                  ylab="Spatially Lag Non Funtional Water Point")
```

```{r}
nci1 <- moran.plot(nga_wp$`wpt functional`, wm73_lw,
                  labels=as.character(nga_wp$ADM2_EN), 
                  xlab="Functional Water Point", 
                  ylab="Spatially Lag Funtional Water Point")

```

### Preparing LISA map classes

```{r}
nga_wp$Z.nonfunc <- scale(nga_wp$`wpt non-functional`) %>% 
  as.vector 
nga_wp$Z.Func <- scale(nga_wp$`wpt functional`)%>%
  as.vector
```

```{r}
nci2 <- moran.plot(nga_wp$Z.nonfunc, wm73_lw,
                   labels=as.character(nga_wp$ADM2_EN),
                   xlab="z-Non-functional Water Point", 
                   ylab="Spatially Lag z-Non-functional Water Point")
```

```{r}
nci3 <- moran.plot(nga_wp$Z.Fun, wm73_lw,
                  labels=as.character(nga_wp$ADM2_EN), 
                  xlab="z-Functional Water Point", 
                  ylab="Spatially Lag Funtional Water Point")
```

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI_dw))
```

```{r}
quadrant2 <- vector(mode="numeric",length=nrow(localMI_dw_FUN))
```

### scale waterpoint

```{r}
DV <- scale(nga_wp.localMI$wpt.non.functional)
DV_Fun <- scale(nga_wp.localMI$wpt.functional) 
```

```{r}
C_mI <- lag.listw(wm73_lw, DV)
C_mI_Fun <- lag.listw(wm73_lw, DV_Fun)
```

Filter all the area with p-value\<0.05 and identify significant areas.

```{r}
MIplot <- data.frame(cbind(DV,C_mI,localMI_dw[,5]))
MIplot <- MIplot %>%
  filter (X3 < 0.05)
plot(x = MIplot$X1, y = MIplot$X2, main = "Moran Scatterplot Fixed Distance", xlab = "scaled Non-Functional (%)", ylab = "Lag scaled Non-Functional (%)")
abline(h = 0, v = 0)
```

```{r}
MIplot <- data.frame(cbind(DV_Fun,C_mI,localMI_dw[,5]))
MIplot <- MIplot %>%
  filter (X3 < 0.05)
plot(x = MIplot$X1, y = MIplot$X2, main = "Moran Scatterplot Fixed Distance", xlab = "scaled Functional (%)", ylab = "Lag scaled Functional (%)")
abline(h = 0, v = 0)
```

## THE END
